#include "play_3p.h"
#include "qobjectdefs.h"
#include <QMainWindow>
#include <QWidget>
#include <QComboBox>
#include <QPushButton>
#include <QLabel>
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QMessageBox>

PLAY_3P::PLAY_3P(QWidget *parent) : QWidget(parent),  PLATEAU(new PLATEAU_3P(this)) {}



void PLAY_3P:: INTERFACE_3P(){

    setWindowTitle("POWER 4");   // Titre de l'interface
    window()->setStyleSheet("background-color: black;"); // Couleur de fond noire


    TITRE = new QLabel("POWER 4", this);         // Création du widget TITRE sous forme de QLABEL
    TITRE->setStyleSheet("font-size: 80px; font-weight: bold; color: red;");



    // Boutons Reset et Quit
    RESET = new QPushButton("RESET", this);   // Création du bouton widget RESET
    RESET->setStyleSheet("font-size: 25px; font-weight: bold;background-color: darkblue; color: white;");

    Quit1 = new QPushButton("RETURN", this);    // Création du bouton widget QUIT
    Quit1->setStyleSheet("font-size: 25px; font-weight: bold;background-color: darkblue; color: white;");


    // Boutons pour chaque colonne
    QHBoxLayout *colonneLayout = new QHBoxLayout();   // création d'un laytout horizontal pour ajouter nos 7 boutons
    for (int i = 0; i < 11 ; ++i) {      // Création de 11 boutons avec boucle for

        boutonColonne = new QPushButton(" TOKEN ");  //Création d'un widget bouton, qu'on va répéter 11 fois + Remplissage écriture bouton
        boutonColonne->setFixedSize(45, 45);   // Taille bouton
        boutonColonne->setStyleSheet("font-size: 10px; font-weight: bold;background-color: darkblue; color: white;");// Personnalisation des boutons

        connect(boutonColonne, &QPushButton::clicked, [this, i]() { colonneCliquee(i); });  // ECRIRE A NOTRE FACON // Association du bouton i à la colonne i
        colonneLayout->addWidget(boutonColonne);   // Ajout des 11 boutons en ligne
    }



    QVBoxLayout *mainLayout = new QVBoxLayout();    // Création d'un Layout principal
    setLayout(mainLayout);                         // Dans lequel on va ajouter tous nos widgets et Layout secondaire

    QHBoxLayout *titreLayout = new QHBoxLayout();   // Création du Layout titre qu'on place au milieu
    titreLayout->addStretch();
    titreLayout->addWidget(TITRE);
    titreLayout->addStretch();

    QHBoxLayout *buttonLayout = new QHBoxLayout();  // Création du Layout Bouton en ligne
    buttonLayout->addWidget(RESET);
    buttonLayout->addWidget(Quit1);


    mainLayout->addLayout(titreLayout);    // Ajout du Layout titre dans le layout principal
    mainLayout->addLayout(colonneLayout);  // ajout du layout des 7 boutons au layout principal
    mainLayout->addWidget(PLATEAU);        // Ajout du plateau dans le layout princiapl
    mainLayout->addLayout(buttonLayout);   // Ajout du layout bouton au layout principal


    connect(RESET, SIGNAL(clicked()), this, SLOT (Reinitialiser()));  // Fonction qui permet d'assosier le bouton RESET à la fonction Reinitialiser()
    connect(Quit1, SIGNAL(clicked()), this, SLOT (close())); // fonction connect qui permet d'associer l'action de quitter au bouton QUIT
}



int PLAY_3P::changerJoueur() {  // Fonction pour changer de joueur actif

    if (joueurActuel == 1) {   // condition if pour changer de joueur si le joueur 1 est actif
        i++;
        joueurActuel = 2;    // le joueur 2 devient actif

    } else if (joueurActuel == 2) { // condition if pour changer de joueur si le joueur 2 est actif
        j++;
        joueurActuel = 3;     // le joueur 3 devient actif

    }else if (joueurActuel == 3) { // condition if pour changer de joueur si le joUeur 3 est actif
        l++;
        joueurActuel = 1;    // le joueur 1 devient actif
    }

    if (i > j){

        k=i ;

    } else if (j == i ){

        k=j+1 ;

    }else if (l == j){

        k=l;
    }

    return k;

}

string PLAY_3P::CouleurJ(){

    if(joueurActuel==1){
        CP = "RED";
    }else if(joueurActuel==2){
        CP = "YELLOW";
    }else if(joueurActuel==3){
         CP = "GREEN";
    }
    return CP;
}

void PLAY_3P::colonneCliquee(int col) {    //

    if (PLATEAU->ajouterJeton(col, joueurActuel)) {  // Si la fonction bool return true (victoire) alors afficher le message

        // On ouvre une fenêtre de dialogue si la condition est vérifiée par le if
        // celle-ci indique quel joueur a gagné en utilisant un argument definissant le dernier joueur actif
        QMessageBox::information(this, "WINNN !!!", QString("PLAYER IN %1 WON!").arg(QString::fromStdString(CP)),QString("WITH %1 TOKENS").arg(k));
        Reinitialiser();
    }else {
    changerJoueur();  // On appelle cette fonction pour changer de joueur quand un joueur a cliqué sur un colonne pour jouer
    }
}

void PLAY_3P::Reinitialiser() {   //Fonction pour réinitialiser le jeu

    PLATEAU->reinitialiser();

    // Réinitialisation des variables quand le jeu est relancé
    i=0;
    j=0;
    l=0;
    k=0;
    joueurActuel =1;
}
